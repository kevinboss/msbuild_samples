<Project>

	<!-- **************************************************************************************************** -->
	<!-- Common Items -->
	<!-- **************************************************************************************************** -->
	<ItemGroup>
		<None Include="Sdk\**" Pack="true" PackagePath="Sdk" />
		<None Include="Content\**" Pack="true" PackagePath="content" />
	</ItemGroup>


	<!-- **************************************************************************************************** -->
	<!-- Task Dependencies -->
	<!-- **************************************************************************************************** -->
	<ItemDefinitionGroup>
		<TaskDependency>
			<Visible>false</Visible>
		</TaskDependency>
	</ItemDefinitionGroup>

	<Target Name="PackTaskDependencies" BeforeTargets="GenerateNuspec">

		<!--The include needs to happen after output has been copied to build output folder but before NuGet generates a nuspec. See https://github.com/NuGet/Home/issues/4704.	-->
		<ItemGroup>
			<_PackageFiles Include="@(TaskDependency)">
				<PackagePath>Sdk\$(TargetFramework)\</PackagePath>
				<Visible>false</Visible>
				<BuildAction>None</BuildAction>
			</_PackageFiles>
		</ItemGroup>

	</Target>


	<!-- **************************************************************************************************** -->
	<!-- Sdk Deployment -->
	<!-- **************************************************************************************************** -->
	<Target Name="DeploySdk" Condition="'$(BuildProjectType)' == 'Source'">

		<ItemGroup>
			<PackageFile Include="@(NuGetPackOutput)" Condition="'%(Extension)' == '.nupkg'" />
		</ItemGroup>

		<!-- Push package to local feed	-->
		<MakeDir Directories="$(PackagePushDir)" />
		<Exec Command="dotnet nuget push %(PackageFile.Identity) --source $(PackagePushDir) --force-english-output" />

		<!-- Removing all versions of the SDK package from the gloabl cache	-->
		<RemoveDir Directories="$(NuGetPackageRoot)\$(PackageId)" />

	</Target>

	<Target Name="UpdateSdk" DependsOnTargets="GetBuildVersion" Condition="'$(BuildProjectType)' == 'Source'">
		<PropertyGroup>
			<GlobalJsonFilePath>$(RootDir)Sample\Source\global.json</GlobalJsonFilePath>
		</PropertyGroup>

		<!-- Replacing the version of the SDK package in the global.json file of the sample project -->
		<ReplaceSdkVersion GlobalJsonFilePath="$(GlobalJsonFilePath)" PackageId="$(PackageId)" Version="$(PackageVersion)" />
	</Target>

	<UsingTask TaskName="ReplaceSdkVersion" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
		<ParameterGroup>
			<GlobalJsonFilePath ParameterType="System.String" Required="true" />
			<PackageId ParameterType="System.String" Required="true" />
			<Version ParameterType="System.String" Required="true" />
		</ParameterGroup>
		<Task>
			<Using Namespace="System.IO" />
			<Using Namespace="System.Text.RegularExpressions" />
			<Code Type="Fragment" Language="cs">
				<![CDATA[
					var pattern = $"(?<=\"{Regex.Escape(PackageId)}\": \")(?<Version>.*)(?=\")";
					
					var currentContent = File.ReadAllText(GlobalJsonFilePath);
					var newContent = Regex.Replace(currentContent, pattern, Version);
					
					File.WriteAllText(GlobalJsonFilePath, newContent);
          ]]>
			</Code>
		</Task>
	</UsingTask>

</Project>